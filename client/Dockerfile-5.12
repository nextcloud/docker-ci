FROM ubuntu:xenial

MAINTAINER Roeland Jago Douma <roeland@famdouma.nl>

RUN apt-get update && \
    apt-get install -y apt-transport-https && \
    apt-get install -y wget libsqlite3-dev git curl perl python \
        software-properties-common build-essential mesa-common-dev \
        pkg-config ninja-build

# Install gcc-7
RUN add-apt-repository -y ppa:ubuntu-toolchain-r/test && \
    apt-get update && \
    apt-get install -y gcc-7 g++-7

# Install clang-6
RUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - && \
    apt-add-repository "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-6.0 main" && \
    apt-get update && \
    apt-get install -y clang-6.0 clang-tidy-6.0

# Add libsecret for qtkeychain
RUN apt-get install -y pkg-config libsecret-1-dev

###########################################################################

# Add Qt-5.12 build dependencies
RUN apt install -y libclang-dev gperf flex bison pkg-config

# https://wiki.qt.io/Building_Qt_5_from_Git
# https://askubuntu.com/questions/158871/how-do-i-enable-the-source-code-repositories
RUN sed -i '/deb-src/s/^# //' /etc/apt/sources.list && apt update && \
    apt-get build-dep -y qt5-default

# Libxcb, libxcb-xinerama0-dev
RUN apt install -y '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev

# OpenGL support
RUN apt install -y flex bison gperf libicu-dev libxslt-dev ruby

# Qt WebEngine
RUN apt install -y libssl-dev libxcursor-dev libxcomposite-dev libxdamage-dev libxrandr-dev libdbus-1-dev \
                   libfontconfig1-dev libcap-dev libxtst-dev libpulse-dev libudev-dev libpci-dev libnss3-dev \
                   libasound2-dev libxss-dev libegl1-mesa-dev gperf bison \
                   libbz2-dev libgcrypt11-dev libdrm-dev libcups2-dev libatkmm-1.6-dev

# Qt Multimedia
RUN apt install -y libasound2-dev libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev

# QDoc Documentation Generator Tool
RUN apt install -y libclang-6.0-dev llvm-6.0

###########################################################################

# Install zlib
RUN cd /tmp && \
    wget https://zlib.net/zlib-1.2.11.tar.gz && \
    tar -xvf zlib-1.2.11.tar.gz && \
    cd zlib-1.2.11 && \
    ./configure && \
    make && \
    make install && \
    cd .. && \
    rm -rf zlib*

# Install openssl
RUN cd /tmp && \
    wget https://www.openssl.org/source/openssl-1.1.1g.tar.gz && \
    tar -xvf openssl-1.1.1g.tar.gz && \
    cd openssl-1.1.1g && \
    ./config && \
    make && \
    make install && \
    cd .. && \
    rm -rf openssl*

# Install cmake
RUN cd /tmp && \
    wget https://github.com/Kitware/CMake/releases/download/v3.14.0/cmake-3.14.0-Linux-x86_64.tar.gz && \
    tar -xvf cmake-3.14.0-Linux-x86_64.tar.gz && \
    cd cmake-3.14.0-Linux-x86_64 && \
    cp -r bin /usr/ && \
    cp -r share /usr/ && \
    cp -r doc /usr/share/ && \
    cp -r man /usr/share/ && \
    cd .. && \
    rm -rf cmake*

# Install clazy
RUN cd /tmp && \
    wget https://downloads.kdab.com/clazy/1.6/Clazy-x86_64-1.6.AppImage -O Clazy.AppImage && \
    chmod +x Clazy.AppImage && \
    ./Clazy.AppImage --appimage-extract && \
    rm Clazy.AppImage && \
    mv squashfs-root /opt/clazy && \
    ln -s /opt/clazy/AppRun /usr/bin/clazy && \
    cd ..

## Download Qt-5.12 sources
#RUN apt install -y xz-utils && \
#    wget https://download.qt.io/official_releases/qt/5.12/5.12.8/single/qt-everywhere-src-5.12.8.tar.xz && \
#    tar -xvf qt-everywhere-src-5.12.8.tar.xz && \
#    cd qt-everywhere-src-5.12.8

## Build Qt-5.12
#RUN cd qt-everywhere-src-5.12.8 && \
#    OPENSSL_LIBS='-L/usr/local/lib -lssl -lcrypto' ./configure -nomake tests -nomake examples -opensource \
#        -confirm-license -release -openssl-linked -prefix /opt/qt5.12.8 && \
#    make && \
#    make install && \
#    cd .. && \
#    rm -rf qt-everywhere*


#
# The following precompiled Qt package has been built with the commands above, using this Dockerfile.
#
# Since it takes a very long time to compile, the build on Docker Hub fails due to a timeout.
#
# This is why we're going to use our own precompiled version here. You may modify the comments in this
# Dockerfile to build your own version on a dedicated build machine.
#

# Download Qt-5.12 precompiled
RUN apt install -y xz-utils && \
    wget https://download.nextcloud.com/desktop/development/qt/qt-bin-5.12.8-openssl-1.1.1g-linux-x86_64-2020-05-24.tar.xz && \
    tar -xvf qt-bin-5.12.8-openssl-1.1.1g-linux-x86_64-2020-05-24.tar.xz && \
    rm qt-bin-5.12.8-openssl-1.1.1g-linux-x86_64-2020-05-24.tar.xz
